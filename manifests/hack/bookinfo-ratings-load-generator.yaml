apiVersion: v1
kind: ConfigMap
metadata:
  name: ratings-load-generator
  namespace: bookinfo
  labels:
    app: ratings-load-generator
data:
  locustfile.py: |
    from locust import HttpUser, task, constant_pacing

    class RatingsUser(HttpUser):
      wait_time = constant_pacing(1)
      @task
      def ratings(self):
        self.client.get("/ratings")
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ratings-load-generator
  namespace: bookinfo
  labels:
    app: ratings-load-generator
spec:
  backoffLimit: 1
  parallelism: 1
  template:
    spec:
      containers:
      - name: locust
        image: locustio/locust:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: LOCUST_HEADLESS
          value: "true"
        - name: LOCUST_LOCUSTFILE
          value: /home/locust/locustfile.py
        - name: LOCUST_HOST
          value: http://ratings:9080
        - name: LOCUST_USERS
          value: "200"
        - name: LOCUST_SPAWN_RATE
          value: "20"
        - name: LOCUST_RUN_TIME
          value: "360s"
        volumeMounts:
        - name: locustfile
          mountPath: /home/locust
      volumes:
      - name: locustfile
        configMap:
          name: locustfile
          items:
          - key: locustfile.py
            path: locustfile.py
      restartPolicy: Never